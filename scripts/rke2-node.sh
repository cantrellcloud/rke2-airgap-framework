#!/usr/bin/env bash
# rke2-node.sh — unified entrypoint with subcommands:
#   template | offline | server | agent | verify
#
# Logs everything to /var/log/rke2-airgap.log with timestamps.
set -Eeuo pipefail
set -o pipefail 2>/dev/null || true

LOG_FILE="${LOG_FILE:-/var/log/rke2-airgap.log}"
mkdir -p /var/log; touch "$LOG_FILE"
exec > >(awk '{ print strftime("[%Y-%m-%d %H:%M:%S] "), $0; fflush() }' | tee -a "$LOG_FILE") 2>&1
trap 'rc=$?; echo "[TRAP] Exit code=$rc at line $LINENO"; exit $rc' EXIT

INSTALL_CACHE="/opt/rke2/get.rke2.sh"
RKE2_VERSION="${RKE2_VERSION:-v1.33.4+rke2r1}"

say(){ echo -e "\n== $* ==\n"; }

need_pkg(){ dpkg -s "$1" >/dev/null 2>&1 || apt-get install -y --no-install-recommends "$1"; }

prep_base() {
  export DEBIAN_FRONTEND=noninteractive
  apt-get update -y
  for p in ca-certificates curl gnupg lsb-release software-properties-common \
           iptables ipset ethtool conntrack socat ebtables nftables \
           nfs-common open-iscsi multipath-tools chrony apparmor apparmor-utils \
           auditd jq unzip tar dnsutils; do
    need_pkg "$p"
  done
  systemctl enable chrony >/dev/null 2>&1 || true; systemctl restart chrony || true
  systemctl enable iscsid multipathd >/dev/null 2>&1 || true; systemctl restart iscsid multipathd || true

  say "Kernel modules"
  cat >/etc/modules-load.d/rke2.conf <<'EOF'
overlay
br_netfilter
EOF
  modprobe overlay || true
  modprobe br_netfilter || true

  say "Sysctl"
  cat >/etc/sysctl.d/99-rke2.conf <<'EOF'
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding = 1
EOF
  sysctl --system

  say "Disable swap"
  swapoff -a || true
  sed -i.bak '/\sswap\s/s/^/#/g' /etc/fstab || true
}

cache_installer() {
  mkdir -p /opt/rke2
  curl -fsSLo "$INSTALL_CACHE" https://get.rke2.io
  chmod +x "$INSTALL_CACHE"
}

backup_and_clear_netplan() {
  say "Backing up and removing existing netplan"
  local ts; ts="$(date +%Y%m%d-%H%M%S)"
  mkdir -p "/etc/netplan/backup-${ts}"
  shopt -s nullglob
  for f in /etc/netplan/*.yaml /etc/netplan/*.yml; do
    mv -f "$f" "/etc/netplan/backup-${ts}/" || true
  done
  shopt -u nullglob
}

render_netplan() {
  local iface="$1" ip_cidr="$2" gw="$3" dns_csv="$4"
  cat >/etc/netplan/01-rke2-static.yaml <<EOF
# generated by rke2-node.sh (offline mode)
network:
  version: 2
  ethernets:
    ${iface}:
      dhcp4: false
      addresses: [${ip_cidr}]
      routes:
        - to: 0.0.0.0/0
          via: ${gw}
      nameservers:
        addresses: [${dns_csv}]
EOF
}

preview_offline_changes() {
  echo "Hostname: ${1}"
  echo
  echo "/etc/netplan/01-rke2-static.yaml"
  echo "--------------------------------"
  sed 's/^/  /' /etc/netplan/01-rke2-static.yaml
  echo "--------------------------------"
}

confirm() {
  local prompt="${1:-Proceed?}"
  local default="${2:-y}" # y or n
  local ans; read -rp "${prompt} [$( [[ "$default" == "y" ]] && echo Y/n || echo y/N )]: " ans || true
  ans="${ans:-$default}"
  [[ "$ans" =~ ^[Yy]$ ]]
}

write_registries_yaml() {
  local prefix="$1" user="$2" pass="$3" ca_path="$4"
  local host; host="$(echo "$prefix" | cut -d/ -f1)"
  mkdir -p /etc/rancher/rke2
  {
    echo "mirrors:"
    echo "  \"docker.io\":        { endpoints: [\"https://${prefix}/docker.io\"] }"
    echo "  \"registry.k8s.io\":  { endpoints: [\"https://${prefix}/registry.k8s.io\"] }"
    echo "  \"quay.io\":          { endpoints: [\"https://${prefix}/quay.io\"] }"
    echo "  \"ghcr.io\":          { endpoints: [\"https://${prefix}/ghcr.io\"] }"
    echo "  \"rancher\":          { endpoints: [\"https://${prefix}/rancher\"] }"
    echo "  \"rancher.io\":       { endpoints: [\"https://${prefix}/rancher.io\"] }"
    echo "configs:"
    echo "  \"${host}\":"
    echo "    auth:"
    echo "      username: \"${user}\""
    echo "      password: \"${pass}\""
    echo "    tls:"
    if [[ -n "$ca_path" && -f "$ca_path" ]]; then
      install -m 0644 "$ca_path" /etc/rancher/rke2/kuberegistry-ca.crt
      echo "      ca_file: /etc/rancher/rke2/kuberegistry-ca.crt"
    else
      echo "      # ca_file: /etc/rancher/rke2/kuberegistry-ca.crt"
    fi
  } >/etc/rancher/rke2/registries.yaml
}

install_rke2_role() {
  local role="$1"
  [[ -x "$INSTALL_CACHE" ]] || { echo "Cached installer not found at $INSTALL_CACHE. Run 'make template' on an online VM first."; exit 1; }
  INSTALL_RKE2_VERSION="${RKE2_VERSION}" sh "$INSTALL_CACHE" "$role"
  systemctl daemon-reload || true
  systemctl enable "rke2-${role}" >/dev/null 2>&1 || true
  systemctl restart "rke2-${role}" || true
}

verify_node() {
  say "VERIFY"
  local ok=0
  lsmod | grep -q br_netfilter && echo "✔ br_netfilter loaded" || { echo "✖ br_netfilter not loaded"; ok=1; }
  lsmod | grep -q overlay && echo "✔ overlay loaded" || { echo "✖ overlay not loaded"; ok=1; }
  [[ "$(sysctl -n net.ipv4.ip_forward 2>/dev/null || echo 0)" = "1" ]] && echo "✔ net.ipv4.ip_forward=1" || { echo "✖ ip_forward!=1"; ok=1; }
  [[ "$(sysctl -n net.bridge.bridge-nf-call-iptables 2>/dev/null || echo 0)" = "1" ]] && echo "✔ bridge-nf-call-iptables=1" || { echo "✖ bridge-nf-call-iptables!=1"; ok=1; }
  [[ "$(swapon --show | wc -l)" = "0" ]] && echo "✔ swap disabled" || { echo "✖ swap devices active"; ok=1; }
  if systemctl list-unit-files | grep -q '^rke2-server\.service'; then
    systemctl is-active --quiet rke2-server && echo "✔ rke2-server active" || echo "ℹ rke2-server not active"
  fi
  if systemctl list-unit-files | grep -q '^rke2-agent\.service'; then
    systemctl is-active --quiet rke2-agent && echo "✔ rke2-agent active" || echo "ℹ rke2-agent not active"
  fi
  if command -v kubectl >/dev/null 2>&1; then kubectl get nodes -o wide || true; fi
  [[ $ok -eq 0 ]] && echo "VERIFY: PASS" || { echo "VERIFY: WARN/FAIL (see above)"; return 1; }
}

usage() {
  cat <<EOF
Usage: $0 {template|offline|server|agent|verify}

template : Prepare a *connected* VM as a template (packages, modules, sysctls, swapoff, cache installer).
offline  : On a cloned VM inside the air-gapped network, prompt for hostname + static IPv4 and render netplan.
           Removes/backs up all existing netplan files before writing new config. Shows a preview for confirmation.
           On confirm, prompts to Shutdown (default) or Reboot. Network changes apply only after power cycle.
server   : Finalize as an RKE2 server (write config, registry mirrors, install/start rke2-server), then runs verify.
agent    : Finalize as an RKE2 agent (join using server URL + token, registry mirrors), then runs verify.
verify   : Run node verification checks and print results.

Logs: $LOG_FILE
RKE2 version (cached installer): $RKE2_VERSION
EOF
}

[[ ${1:-} ]] || { usage; exit 2; }
cmd="$1"; shift || true
[[ $EUID -eq 0 ]] || { echo "Please run as root (sudo)."; exit 1; }

case "$cmd" in
  template)
    say "Template mode"
    hostnamectl set-hostname rke2image
    prep_base
    cache_installer
    echo "Template ready. Power off, convert to hypervisor template."
    ;;

  offline)
    say "Offline mode (prompting for hostname/IP settings)"
    while true; do
      read -rp "New hostname: " NEW_HOST
      [[ -n "$NEW_HOST" ]] || { echo "Hostname required."; continue; }
      read -rp "Primary interface (e.g., eno1): " IFACE
      [[ -n "$IFACE" ]] || { echo "Interface required."; continue; }
      read -rp "IPv4/CIDR (e.g., 10.0.4.101/24): " IP_CIDR
      [[ -n "$IP_CIDR" ]] || { echo "IPv4/CIDR required."; continue; }
      read -rp "Gateway (e.g., 10.0.4.1): " GW
      [[ -n "$GW" ]] || { echo "Gateway required."; continue; }
      read -rp "DNS (comma-separated, e.g., 10.0.0.10,1.1.1.1): " DNS_CSV
      [[ -n "$DNS_CSV" ]] || { echo "DNS required."; continue; }

      backup_and_clear_netplan
      render_netplan "$IFACE" "$IP_CIDR" "$GW" "$DNS_CSV"
      hostnamectl set-hostname "$NEW_HOST"
      preview_offline_changes "$NEW_HOST"

      # Confirm; if not correct, loop again
      read -rp "Are these settings correct? [Y/n]: " ok || true
      ok="${ok:-Y}"
      if [[ "$ok" =~ ^[Yy]$ ]]; then
        echo
        echo "Choose power action:"
        echo "  [1] Shutdown (default)"
        echo "  [2] Reboot"
        read -rp "Selection [1/2]: " SEL || true
        SEL="${SEL:-1}"
        if [[ "$SEL" == "2" ]]; then
          echo "Rebooting..."
          reboot
        else
          echo "Shutting down..."
          shutdown -h now
        fi
        exit 0
      else
        echo "Re-enter details..."
      fi
    done
    ;;

  server)
    say "Finalize as RKE2 SERVER"
    read -rp "Private registry prefix (e.g., kuberegistry.dev.kube/rke2): " REG_PREFIX
    read -rp "Registry username: " REG_USER
    read -rsp "Registry password: " REG_PASS; echo
    read -rp "Path to registry CA bundle (PEM) [optional]: " CA_PATH || true
    mkdir -p /etc/rancher/rke2
    echo "system-default-registry: \"${REG_PREFIX}\"" >/etc/rancher/rke2/config.yaml
    write_registries_yaml "$REG_PREFIX" "$REG_USER" "$REG_PASS" "${CA_PATH:-}"
    install_rke2_role "server"
    verify_node
    ;;

  agent)
    say "Finalize as RKE2 AGENT"
    read -rp "RKE2 server URL (e.g., https://10.0.4.101:9345): " SERVER_URL
    read -rp "Join token (or path to token file): " TOKEN_OR_FILE
    TOKEN="$TOKEN_OR_FILE"
    [[ -f "$TOKEN_OR_FILE" ]] && TOKEN="$(head -n1 "$TOKEN_OR_FILE" | tr -d '\r\n')"
    read -rp "Private registry prefix (e.g., kuberegistry.dev.kube/rke2): " REG_PREFIX
    read -rp "Registry username: " REG_USER
    read -rsp "Registry password: " REG_PASS; echo
    read -rp "Path to registry CA bundle (PEM) [optional]: " CA_PATH || true

    mkdir -p /etc/rancher/rke2
    {
      echo "system-default-registry: \"${REG_PREFIX}\""
      echo "server: \"${SERVER_URL}\""
      echo "token: \"${TOKEN}\""
    } >/etc/rancher/rke2/config.yaml
    write_registries_yaml "$REG_PREFIX" "$REG_USER" "$REG_PASS" "${CA_PATH:-}"
    install_rke2_role "agent"
    verify_node
    ;;

  verify)
    verify_node
    ;;

  *)
    usage; exit 2 ;;
esac
